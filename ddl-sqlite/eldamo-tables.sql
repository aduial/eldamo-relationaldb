-- CREATED definition

CREATE TABLE CREATED (
    ID integer NOT NULL,
    TXT varchar(255) NOT NULL,
    PRIMARY KEY (ID)
);


-- FORM definition

CREATE TABLE FORM (
    ID integer NOT NULL,
    TXT varchar(255) NOT NULL, NORMALTXT VARCHAR(255),
    PRIMARY KEY (ID)
);

CREATE INDEX FORM_NORMALTXT_idx on  FORM 
(
   NORMALTXT
)
;
CREATE INDEX idx_form_txt on form(txt)
;


-- CAT definition

CREATE TABLE CAT (
    ID integer NOT NULL,
    LABEL varchar(255),
    PARENT_ID integer,
    PRIMARY KEY (ID),
    FOREIGN KEY (PARENT_ID) REFERENCES CAT (ID)
);


-- "LANGUAGE" definition

CREATE TABLE LANGUAGE (
    ID integer NOT NULL,
    NAME varchar(255) NOT NULL,
    LANG varchar(10),
    PARENT_ID integer,
    PRIMARY KEY (ID),
    FOREIGN KEY (PARENT_ID) REFERENCES LANGUAGE (ID)
);


-- "TYPE" definition

CREATE TABLE TYPE (
    ID integer NOT NULL,
    TXT varchar(50) NOT NULL,
    PARENT_ID integer,
    PRIMARY KEY (ID),
    FOREIGN KEY (PARENT_ID) REFERENCES TYPE (ID)
);


-- DOC definition

CREATE TABLE DOC (
    ID integer NOT NULL,
    TXT varchar(20000) NOT NULL,
    DOCTYPE_ID integer,
    PRIMARY KEY (ID),
    FOREIGN KEY (DOCTYPE_ID) REFERENCES TYPE (ID)
);
CREATE INDEX DOC_TXT_IDX ON DOC (TXT,DOCTYPE_ID);


-- ARNEDIAD definition
-- LANGUAGE_DOC, SOURCE_DOC and ENTRY_DOC
-- EIC_INFLECT,EIC_CLASS, ENTRY_SPEECH
CREATE TABLE ARNEDIAD (
   FROM_ID INTEGER NOT NULL,
   TO_ID INTEGER NOT NULL,
   "ORDERING" INTEGER NOT NULL,
   ARNEDIAD_TYPE_ID INTEGER NOT NULL,
   CONSTRAINT ARNEDIAD_PK PRIMARY KEY (FROM_ID, TO_ID,"ORDERING", ARNEDIAD_TYPE_ID),
   CONSTRAINT FK_ARNEDIAD_TYPE FOREIGN KEY (ARNEDIAD_TYPE_ID) REFERENCES "TYPE"(ID)
);
CREATE INDEX ARNEDIAD_FROM_TO_IDX ON ARNEDIAD (FROM_ID, TO_ID, "ORDERING", ARNEDIAD_TYPE_ID);


-- GLOSS definition

CREATE TABLE GLOSS (
    ID integer NOT NULL,
    LANGUAGE_ID integer NOT NULL,
    TXT varchar(255) NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (LANGUAGE_ID) REFERENCES LANGUAGE (ID)
);
CREATE INDEX GLOSS_TXT_IDX ON GLOSS (TXT);
CREATE INDEX GLOSS_LANGUAGE_ID_IDX ON GLOSS (LANGUAGE_ID,TXT);

-- "SOURCE" definition

CREATE TABLE SOURCE (
    ID integer NOT NULL,
    NAME varchar(255),
    PREFIX varchar(255),
    SOURCETYPE_ID integer,
    PRIMARY KEY (ID),
    FOREIGN KEY (SOURCETYPE_ID) REFERENCES TYPE (ID)
);


-- ENTRY definition

CREATE TABLE ENTRY (
    ID integer NOT NULL,
    FORM_ID integer NOT NULL,
    LANGUAGE_ID integer NOT NULL,
    GLOSS_ID integer,
    NGLOSS_ID integer,
    CAT_ID integer,
    CREATED_ID integer,
    RULE_FORM_ID integer,
    FROM_FORM_ID integer,
    STEM_FORM_ID integer,
    ORTHO_FORM_ID integer,
    TENGWAR varchar(100),
    MARK varchar(10),
    NEOVERSION varchar(20),
    ELDAMO_PAGEID varchar(50),
    ORDERFIELD varchar(50),
    ENTRY_TYPE_ID integer,
    PRIMARY KEY (ID),
    CONSTRAINT FK_ENTRY_FORM FOREIGN KEY (FORM_ID) REFERENCES FORM (ID),
    CONSTRAINT FK_ENTRY_LANGUAGE FOREIGN KEY (LANGUAGE_ID) REFERENCES LANGUAGE (ID),
    CONSTRAINT FK_ENTRY_GLOSS FOREIGN KEY (GLOSS_ID) REFERENCES GLOSS (ID),
    CONSTRAINT FK_ENTRY_NGLOSS FOREIGN KEY (NGLOSS_ID) REFERENCES GLOSS (ID),
    CONSTRAINT FK_ENTRY_CAT FOREIGN KEY (CAT_ID) REFERENCES CAT (ID),
    CONSTRAINT FK_ENTRY_CREATED FOREIGN KEY (CREATED_ID) REFERENCES CREATED (ID),
    CONSTRAINT FK_ENTRY_RULE_FORM FOREIGN KEY (RULE_FORM_ID) REFERENCES FORM (ID),
    CONSTRAINT FK_ENTRY_FROM_FORM FOREIGN KEY (FROM_FORM_ID) REFERENCES FORM (ID),
    CONSTRAINT FK_ENTRY_STEM_FORM FOREIGN KEY (STEM_FORM_ID) REFERENCES FORM (ID),
    CONSTRAINT FK_ENTRY_ORTHO_FORM FOREIGN KEY (ORTHO_FORM_ID) REFERENCES FORM (ID),
    CONSTRAINT FK_ENTRY_TYPE FOREIGN KEY (ENTRY_TYPE_ID) REFERENCES TYPE (ID)
);


-- LINKED definition
-- maps before, cognate (word), combine, deprecated, deriv (word), see, see-also,
-- see-further, see-notes, word
CREATE TABLE LINKED (
   ID INTEGER NOT NULL,
   ENTRY_ID INTEGER NOT NULL,
   LANG_ID INTEGER NOT NULL,
   FORM_ID INTEGER NOT NULL,
   MARK VARCHAR(10),
   "ORDERING" INTEGER,
   LINKED_TYPE_ID INTEGER NOT NULL,
   CONSTRAINT LINKED_PK PRIMARY KEY (ID),
   CONSTRAINT FK_LINKED_ENTRY FOREIGN KEY (ENTRY_ID) REFERENCES ENTRY(ID),
   CONSTRAINT FK_LINKED_LANGUAGE FOREIGN KEY (LANG_ID) REFERENCES "LANGUAGE"(ID),
   CONSTRAINT FK_LINKED_FORM FOREIGN KEY (FORM_ID) REFERENCES FORM(ID),
   CONSTRAINT FK_LINKED_TYPE FOREIGN KEY (LINKED_TYPE_ID) REFERENCES "TYPE"(ID)
);
CREATE INDEX LINKED_ENTRY_ID_IDX ON LINKED (ENTRY_ID,LINKED_TYPE_ID);
CREATE INDEX LINKED_LANG_ID_IDX ON LINKED (LANG_ID,FORM_ID,LINKED_TYPE_ID,"ORDERING");

-- "REF" definition
-- maps change, cognate (ref), correction, deriv (ref), example, ref
-- and rule, rule-example, rule-start
CREATE TABLE REF (
    ID integer NOT NULL,
    REF_ID integer,   -- parent
    ENTRY_ID integer, -- parent
    GLOSS_ID integer,
    LANG_ID integer,
    FORM_ID integer,
    SOURCE_ID integer,
    SOURCE VARCHAR(255),
    FORM1_ID integer, -- or RULE
    FORM2_ID integer, -- or FROM
    FORM3_ID integer, -- or STAGE
    MARK varchar(10), 
    ORDERING integer,
    REF_TYPE_ID integer NOT NULL,
    CONSTRAINT REF_PK PRIMARY KEY (ID),   
    CONSTRAINT FK_REF_REF FOREIGN KEY (REF_ID) REFERENCES REF (ID),  
    CONSTRAINT FK_REF_ENTRY FOREIGN KEY (ENTRY_ID) REFERENCES ENTRY (ID),
    CONSTRAINT FK_REF_GLOSS FOREIGN KEY (GLOSS_ID) REFERENCES GLOSS (ID),
    CONSTRAINT FK_REF_LANGUAGE FOREIGN KEY (LANG_ID) REFERENCES LANGUAGE (ID),
    CONSTRAINT FK_REF_FORM FOREIGN KEY (FORM_ID) REFERENCES FORM (ID),
    CONSTRAINT FK_REF_SOURCE FOREIGN KEY (SOURCE_ID) REFERENCES SOURCE (ID),
    CONSTRAINT FK_REF_FORM1 FOREIGN KEY (FORM1_ID) REFERENCES FORM (ID),
    CONSTRAINT FK_REF_FORM2 FOREIGN KEY (FORM2_ID) REFERENCES FORM (ID),
    CONSTRAINT FK_REF_FORM3 FOREIGN KEY (FORM3_ID) REFERENCES FORM (ID),
    CONSTRAINT FK_REF_TYPE FOREIGN KEY (REF_TYPE_ID) REFERENCES TYPE (ID)
);

-- EIC definition
-- maps element (word), element (ref), inflect, class
-- moved form and variant to arnediad intersection
CREATE TABLE EIC (
   ID integer NOT NULL,
   ENTRY_ID INTEGER,
   REF_ID INTEGER,
   LANG_ID INTEGER,
   SOURCE_ID INTEGER,
   SOURCE VARCHAR(255),
   FORM_ID INTEGER,
   MARK VARCHAR(10),
   ORDERING INTEGER,
   EIC_TYPE_ID INTEGER,
   CONSTRAINT EIC_PK PRIMARY KEY (ID),
   CONSTRAINT FK_EIC_ENTRY FOREIGN KEY (ENTRY_ID) REFERENCES ENTRY(ID),
   CONSTRAINT FK_EIC_FORM FOREIGN KEY (FORM_ID) REFERENCES FORM(ID),
   CONSTRAINT FK_EIC_LANGUAGE FOREIGN KEY (LANG_ID) REFERENCES "LANGUAGE"(ID),
   CONSTRAINT FK_EIC_REF FOREIGN KEY (REF_ID) REFERENCES "REF"(ID),
   CONSTRAINT FK_EIC_SOURCE FOREIGN KEY (SOURCE_ID) REFERENCES "SOURCE"(ID),
   CONSTRAINT FK_EIC_TYPE FOREIGN KEY (EIC_TYPE_ID) REFERENCES "TYPE"(ID)
);
CREATE INDEX EIC_ENTRY_REF_IDX ON EIC (ENTRY_ID,REF_ID, ORDERING);

-- EXAMPLE definition
-- maps order-, deriv- and inflect- examples
CREATE TABLE EXAMPLE (
   LINKED_ID INTEGER,
   REF_ID INTEGER,
   SOURCE_ID INTEGER NOT NULL,
   SOURCE VARCHAR(255),
   FORM_ID INTEGER NOT NULL,
   "ORDERING" INTEGER,
   EXAMPLE_TYPE_ID INTEGER NOT NULL,
   CONSTRAINT FK_EXAMPLE_FORM FOREIGN KEY (FORM_ID) REFERENCES FORM(ID),
   CONSTRAINT FK_EXAMPLE_LINKED FOREIGN KEY (LINKED_ID) REFERENCES LINKED(ID),
   CONSTRAINT FK_EXAMPLE_REF FOREIGN KEY (REF_ID) REFERENCES "REF"(ID),
   CONSTRAINT FK_EXAMPLE_SOURCE FOREIGN KEY (SOURCE_ID) REFERENCES "SOURCE"(ID),
   CONSTRAINT FK_EXAMPLE_TYPE FOREIGN KEY (EXAMPLE_TYPE_ID) REFERENCES "TYPE"(ID)
);
CREATE INDEX EXAMPLE_LINKED_ID_IDX ON EXAMPLE (LINKED_ID);
CREATE INDEX EXAMPLE_REF_ID_IDX ON EXAMPLE (REF_ID);